{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Projects\\\\React Native\\\\React-MobilProje\\\\screens\\\\Login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nvar AuthContext = React.createContext();\n\nfunction SplashScreen() {\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Loading...\"));\n}\n\nfunction HomeScreen() {\n  var _React$useContext = React.useContext(AuthContext),\n      signOut = _React$useContext.signOut;\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Signed in!\"), React.createElement(Button, {\n    title: \"Sign out\",\n    onPress: signOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction SignInScreen() {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      username = _React$useState2[0],\n      setUsername = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  var _React$useContext2 = React.useContext(AuthContext),\n      signIn = _React$useContext2.signIn;\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputText,\n    placeholder: \"Username\",\n    placeholderTextColor: \"#003f5c\",\n    value: username,\n    onChangeText: setUsername,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputText,\n    placeholder: \"Password\",\n    placeholderTextColor: \"#003f5c\",\n    value: password,\n    onChangeText: setPassword,\n    secureTextEntry: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  })), React.createElement(TouchableOpacity, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.forgot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Forgot Password?\")), React.createElement(TouchableOpacity, {\n    style: styles.loginBtn,\n    title: \"Sign in\",\n    onPress: function onPress() {\n      return signIn({\n        username: username,\n        password: password\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.forgot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"LOGIN\")), React.createElement(TouchableOpacity, {\n    style: styles.loginBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.loginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"SIGN UP\")));\n}\n\nvar Stack = createStackNavigator();\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 3:\n              userToken = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 8:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, state.isLoading ? React.createElement(Stack.Screen, {\n    name: \"Splash\",\n    component: SplashScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }) : state.userToken == null ? React.createElement(Stack.Screen, {\n    name: \"SignIn\",\n    component: SignInScreen,\n    options: {\n      title: 'Sign in',\n      animationTypeForReplace: state.isSignout ? 'pop' : 'push'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }) : React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#003f5c',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputView: {\n    width: \"80%\",\n    backgroundColor: \"#465881\",\n    borderRadius: 25,\n    height: 50,\n    marginBottom: 20,\n    justifyContent: \"center\",\n    padding: 20\n  },\n  inputText: {\n    height: 50,\n    color: \"white\",\n    fontSize: 30\n  },\n  forgot: {\n    color: \"white\",\n    fontSize: 11\n  },\n  loginBtn: {\n    width: \"80%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 30,\n    marginBottom: -20\n  },\n  forgot: {\n    color: \"white\",\n    fontSize: 11\n  }\n});","map":{"version":3,"sources":["D:/Projects/React Native/React-MobilProje/screens/Login.js"],"names":["React","NavigationContainer","createStackNavigator","AuthContext","createContext","SplashScreen","HomeScreen","useContext","signOut","SignInScreen","useState","username","setUsername","password","setPassword","signIn","styles","container","inputView","inputText","forgot","loginBtn","loginText","Stack","App","navigation","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","useEffect","bootstrapAsync","AsyncStorage","getItem","authContext","useMemo","data","signUp","title","animationTypeForReplace","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","borderRadius","height","marginBottom","padding","color","fontSize","marginTop"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet,TouchableOpacity, Button, Text, TextInput, View } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nfunction SplashScreen() {\r\n  return (\r\n    <View>\r\n      <Text>Loading...</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction HomeScreen() {\r\n  const { signOut } = React.useContext(AuthContext);\r\n\r\n  return (\r\n    <View>\r\n      <Text>Signed in!</Text>\r\n      <Button title=\"Sign out\" onPress={signOut} />\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction SignInScreen() {\r\n  const [username, setUsername] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n\r\n  const { signIn } = React.useContext(AuthContext);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        <View style={styles.inputView}>\r\n            <TextInput\r\n                style={styles.inputText}\r\n                placeholder=\"Username\"\r\n                placeholderTextColor=\"#003f5c\"\r\n                value={username}\r\n                onChangeText={setUsername}\r\n            />\r\n            </View>\r\n            <View style={styles.inputView}>\r\n            <TextInput\r\n                style={styles.inputText}\r\n                placeholder=\"Password\"\r\n                placeholderTextColor=\"#003f5c\"\r\n                value={password}\r\n                onChangeText={setPassword}\r\n                secureTextEntry\r\n            />\r\n            </View>\r\n            <TouchableOpacity>\r\n                <Text style={styles.forgot}>Forgot Password?</Text>\r\n            </TouchableOpacity>\r\n            \r\n            <TouchableOpacity style={styles.loginBtn} title=\"Sign in\" onPress={() => signIn({ username, password })}>\r\n                <Text style={styles.forgot}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            \r\n            <TouchableOpacity style={styles.loginBtn}>\r\n                <Text style={styles.loginText}>SIGN UP</Text>\r\n            </TouchableOpacity>\r\n            \r\n    </View>\r\n  );\r\n}\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport default function App({ navigation }) {\r\n  const [state, dispatch] = React.useReducer(\r\n    (prevState, action) => {\r\n      switch (action.type) {\r\n        case 'RESTORE_TOKEN':\r\n          return {\r\n            ...prevState,\r\n            userToken: action.token,\r\n            isLoading: false,\r\n          };\r\n        case 'SIGN_IN':\r\n          return {\r\n            ...prevState,\r\n            isSignout: false,\r\n            userToken: action.token,\r\n          };\r\n        case 'SIGN_OUT':\r\n          return {\r\n            ...prevState,\r\n            isSignout: true,\r\n            userToken: null,\r\n          };\r\n      }\r\n    },\r\n    {\r\n      isLoading: true,\r\n      isSignout: false,\r\n      userToken: null,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    // Fetch the token from storage then navigate to our appropriate place\r\n    const bootstrapAsync = async () => {\r\n      let userToken;\r\n\r\n      try {\r\n        userToken = await AsyncStorage.getItem('userToken');\r\n      } catch (e) {\r\n        // Restoring token failed\r\n      }\r\n\r\n      // After restoring token, we may need to validate it in production apps\r\n\r\n      // This will switch to the App screen or Auth screen and this loading\r\n      // screen will be unmounted and thrown away.\r\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\r\n    };\r\n\r\n    bootstrapAsync();\r\n  }, []);\r\n\r\n  const authContext = React.useMemo(\r\n    () => ({\r\n      signIn: async data => {\r\n        // In a production app, we need to send some data (usually username, password) to server and get a token\r\n        // We will also need to handle errors if sign in failed\r\n        // After getting token, we need to persist the token using `AsyncStorage`\r\n        // In the example, we'll use a dummy token\r\n\r\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\r\n      },\r\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\r\n      signUp: async data => {\r\n        // In a production app, we need to send user data to server and get a token\r\n        // We will also need to handle errors if sign up failed\r\n        // After getting token, we need to persist the token using `AsyncStorage`\r\n        // In the example, we'll use a dummy token\r\n\r\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContext}>\r\n        <Stack.Navigator>\r\n          {state.isLoading ? (\r\n            // We haven't finished checking for the token yet\r\n            <Stack.Screen name=\"Splash\" component={SplashScreen} />\r\n          ) : state.userToken == null ? (\r\n            // No token found, user isn't signed in\r\n            <Stack.Screen\r\n              name=\"SignIn\"\r\n              component={SignInScreen}\r\n              options={{\r\n                title: 'Sign in',\r\n            // When logging out, a pop animation feels intuitive\r\n                animationTypeForReplace: state.isSignout ? 'pop' : 'push',\r\n              }}\r\n            />\r\n          ) : (\r\n            // User is signed in\r\n            <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n          )}\r\n        </Stack.Navigator>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#003f5c',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputView:{\r\n        width:\"80%\",\r\n        backgroundColor:\"#465881\",\r\n        borderRadius:25,\r\n        height:50,\r\n        marginBottom:20,\r\n        justifyContent:\"center\",\r\n        padding:20\r\n    },\r\n    inputText:{\r\n        height:50,\r\n        color:\"white\",\r\n        fontSize:30\r\n    },\r\n    forgot:{\r\n        color:\"white\",\r\n        fontSize:11\r\n    },\r\n    loginBtn:{\r\n        width:\"80%\",\r\n        backgroundColor:\"#fb5b5a\",\r\n        borderRadius:25,\r\n        height:50,\r\n        alignItems:\"center\",\r\n        justifyContent:\"center\",\r\n        marginTop:30,\r\n        marginBottom:-20\r\n    },\r\n    forgot:{\r\n        color:\"white\",\r\n        fontSize:11\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}